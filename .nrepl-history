(require 'core.db.entities)
(require 'core.db.schemap)
(require 'datomic.api :as d)
(require 'datomic.api 'as d)
(require 'datomic.api :as 'd)
(require '[datomic.api :as 'd])
(require '[datomic.api :as d])
(require '[core.services.public.auth :refer :all])
(d/get-database-name (db-url))
(d/get-database-names (db-url))
(reauire '[impl.db.schema :refer :all])
(require '[impl.db.schema :refer :all])
(d/get-database-names (db-url))
(d/get-database-names (str (db-url) "*")
asda
)
(d/get-database-names (str (db-url) "*"))
(contains? (d/get-database-names (str (db-url) "*") "voytech")
)
(contains? (d/get-database-names (str (db-url) "*") "voytech"))
(contains? (d/get-database-names (str (db-url) "*")) "voytech")
(d/get-database-names (str (db-url) "*"))
(some #{"voytech"} (d/get-database-names (str (db-url) "*")))
(require '[core.services.public.auth :refer :all] :reload-all)
(authenticate Wojtass wojtass)
(authenticate "Wojtass" "wojtass")
(authenticate "Dora" "dora")
(require '[core.services.public.auth :refer :all] :reload-all)
(authenticate "Dora" "dora")
(authenticate "Wojtass" "wojtass")
(require '[core.services.public.auth :refer :all] :reload-all)
(authenticate "Wojtass" "wojtass")
(authenticate "Dora" "dora")
(require '[core.services.base :refer :all] :reload-all)
(require '[core.services.tenant.manage :refer :all] :reload-all)
(create-tenant {:username "Dora", :firstname "Dorota", :lastname "Lora", :email "dora@gmail.com"})
(authenticate "Dora" "dora")
(require '[core.services.public.auth :refer :all] :reload-all)
*session*
(def atm (atom {}))
@atm
atm
(swap! atm merge {:key-1 "dupa",:key-2 "cipa"})
@atm
