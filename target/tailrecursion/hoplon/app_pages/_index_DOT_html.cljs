(ns tailrecursion.hoplon.app-pages._index_DOT_html (:require [tailrecursion.hoplon.reload :refer [reload-all]] [ui.views.toolkit-view :refer [library-view]] [ui.views.canvas :refer [workspace]] [ui.components.settings :refer [settings]] [hoplon.twitter.bootstrap :as b :refer [container tab tabs]] [tailrecursion.hoplon :refer [form audio input hgroup do! timeout $text rely base h1 embed h3 body keygen val-id on-append! progress main cite object i p nav ruby relx check-val! a menu blockquote img $comment span track seq?* data u dl select html thead del eventsource append-child fieldset rel aside figure figcaption q on! bdi video address caption parse-args by-id dd rp hr tbody table acronym frame applet html-var add-initfn! pre ul dir html-time add-attributes! html-map sup dfn sub mark script big button wbr strong li dt frameset td tr section th optgroup rel-event iframe legend em kbd spliced article isindex abbr command source output basefont route-cell header datalist tfoot s ins footer title is-ie8 h5 canvas param font div option summary samp center small style textarea loop-tpl* strike h4 tt head add-children! ol details col vector?* label rt when-dom h6 link colgroup meter html-meta text-val! bdo b code node? noframes replace-children! noscript safe-nth h2 area br unsplice]] [tailrecursion.javelin :refer [input? cell cell? destroy-cell! ^{:private true} last-rank ^{:deprecated true} lift lens? set-formula! cell-doseq* ^{:private true, :dynamic true} *tx* deref* set-cell! lens formula? alts! dosync* cell-map formula]]) (:require-macros [tailrecursion.hoplon :refer [text with-timeout sexp defelem def-values loop-tpl with-interval with-init!]] [tailrecursion.javelin :refer [with-let mx2 dosync cell= set-cell!= prop-cell cell-doseq defc cell-let-1 defc= macroexpand-all mx cell-let]]))

(reload-all 2000)

(html (head (link :href "css/bootstrap.inc.css" :rel "stylesheet") (link :href "css/main.inc.css" :rel "stylesheet") (script :src "js/bootstrap-filestyle.inc.js") (script :src "js/init.inc.js")) (body (div :id "container" (div :id "library" (tabs (tab :name "Photos" (library-view)) (tab :name "Templates" (div (text "Tempaltes here!"))) (tab :name "Clip-Arts" (div (text "Clip-Arts here!"))) (tab :name "Edit Tools" (div (text "Edit tools"))) (tab :name "Settings" (settings)))) (div :id "workspace" (workspace)) (div :id "slides"))))
