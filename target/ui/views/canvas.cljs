(ns ui.views.canvas (:require [utils.dom.dnd-utils :as dnd] [utils.dom.dom-utils :as dom] [core.settings :as settings] [ui.components.pagination :refer [pagination]] [core.canvas-interface :as canvas-sheet] [tailrecursion.hoplon :refer [form audio input hgroup do! timeout $text rely base h1 embed h3 body keygen val-id on-append! progress main cite object i p nav ruby relx check-val! a menu blockquote img $comment span track seq?* data u dl select html thead del eventsource append-child fieldset rel aside figure figcaption q on! bdi video address caption parse-args by-id dd rp hr tbody table acronym frame applet html-var add-initfn! pre ul dir html-time add-attributes! html-map sup dfn sub mark script big button wbr strong li dt frameset td tr section th optgroup rel-event iframe legend em kbd spliced article isindex abbr command source output basefont route-cell header datalist tfoot s ins footer title is-ie8 h5 canvas param font div option summary samp center small style textarea loop-tpl* strike h4 tt head add-children! ol details col vector?* label rt when-dom h6 link colgroup meter html-meta text-val! bdo b code node? noframes replace-children! noscript safe-nth h2 area br unsplice]] [tailrecursion.javelin :refer [input? cell cell? destroy-cell! ^{:private true} last-rank ^{:deprecated true} lift lens? set-formula! cell-doseq* ^{:private true, :dynamic true} *tx* deref* set-cell! lens formula? alts! dosync* cell-map formula]]) (:require-macros [tailrecursion.hoplon :refer [text with-timeout sexp defelem def-values loop-tpl with-interval with-init!]] [tailrecursion.javelin :refer [with-let mx2 dosync cell= set-cell!= prop-cell cell-doseq defc cell-let-1 defc= macroexpand-all mx cell-let]]))

(def current-page (cell= (inc (get-in canvas-sheet/project [:current-page-idx]))))

(defn resolve-drop "Should resolve drop events for following scenarios:\r\n                    1. The drag source is from the library component (image is dragged)\r\n                    2. The drag source comes from desktop (Use FileApi to load image)" [event] (.preventDefault event) ((comp canvas-sheet/add dnd/dispatch-drop-event) event))

(dom/wait-on-element "canvas-wrapper" (fn* [] (canvas-sheet/initialize-workspace)))

(defelem workspace [] (div :id "workspace-inner" (div :id "page-indicator" :class "text-center" (text "Page : ~{current-page}")) (div :id "canvas-wrapper" :class "workspace-div" :drop resolve-drop :dragover (fn* [p1__1434#] (.preventDefault p1__1434#))) (div :id "pagination" :class "page-pagination text-center" (pagination :enabled (cell= (get-in settings/settings [:multi-page])) :pages (cell= (get-in settings/settings [:pages :count])) :change-page (fn* [p1__1435#] (swap! canvas-sheet/project assoc-in [:current-page-idx] p1__1435#)))) (div :is "slideshow")))
