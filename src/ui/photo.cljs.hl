(ns ui.photo
  (:require [utils.dom.dnd-utils :as dnd]
            [utils.dom.dom-utils :as dom]))

(defn dragover [event]
  (.log js/window.console event)
  (.stopPropagation event)
  (.preventDefault event)
)

(declare photo-view)

(declare select-files!)

(defn drop! [event,handle]
  (.stopPropagation event)
  (.preventDefault event)
  (select-files! event handle)
)

(defn select-files! [event,callback]
  (let [files (.-files (.-target event))]
      (let [file (aget files 0)]
        (let [reader (js/FileReader.)]
          (set! (.-onload reader) #(callback {:name (.-name file)
                                              :type (.-type file)
                                              :content (.-result (.-target %))}))
          (.readAsDataURL reader file)
        )
      )))

(defelem photo-loader [{:keys [class callback ]}]
  (div :class class
       :id "drop-area"
       :drop #(drop! % callback)
       :on-dragover dragover
       (div :class "file-load-wrapper"
            (input :id "fileload"
                   :type "file"
                   :name "files[]"
                   :class "filestyle"
                   :change #(select-files! % callback) ))))

(defelem photo-list [{:keys [list]}]
  (div)
  (div
   (loop-tpl :bindings [{:keys [name content]} list]
             (photo-view :name name :content content))))

(defelem photo-view [{:keys [name content]}]
 (div
  (img :class "img-rounded"
       :id name
       :src content
       :draggable "true"
       :dragstart #(dnd/set-dnd-data % "img-id" name))))
