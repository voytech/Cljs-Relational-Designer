(ns ui.components.hoplon-grid)

;; Paged list introduces paging logic to list containg of any elements.
;; provider provides elements to be placed in list for selected page.
(defn- cell-plug-in [row schema prop]
  (when-let [plugin (-> schema prop :cell-plugin)]
    (plugin :row row)))

(defn- do-row [row props schema row-plugin]
  (let [display (cell false)]
    [(tr :click #(do
                   (when (not (nil? (:activate row-plugin)))
                     ((:activate row-plugin) row))
                   (reset! display (not @display)))
         (doall (map #(td (or
                            (cell-plug-in row schema %)
                            (% row))) props)))
     (when (not (nil? row-plugin))
       (tr :class (cell= {:hidden (not display)})
        (td :colspan 100
            ((:view row-plugin) :row row))))]))

(defelem hoplon-grid [{:keys [schema
                              row-plugin
                              data-cell
                              paging-opts
                              change-page-func
                              ]}]
  (div (let [page-nr (cell 1)
             hasmore (atom true)
             props (keys schema)]
        (div
          (table :class "hoplon-grid table table-condensed table-hover table-bordered"
            (thead (tr (doall (map #(th (:title (% schema))) props))))
            (tbody (cell= (doall (map #(do-row % props schema row-plugin) data-cell)))))
          (div :class "row center-block"
               (div :class "btn-group center-block"
                    (button :type "button"
                            :class "btn bn-default btn-xs"
                            :click #(when (> @page-nr 0) (swap! page-nr dec))
                            (span :class "glyphicon glyphicon-arrow-left"))
                    (button :type "button"
                            :class "btn btn-default btn-xs"
                            :click #(when (= true @hasmore) (swap! page-nr inc))
                            (span :class "glyphicon glyphicon-arrow-right"))))))))
