(ns ui.components.accordion
  (:require [utils.dom.dom-utils :as dom]))

(def ^:private CLASS-COLLAPSED "collapse")
;Those are exposed elements
(defelem entry-title [& elem]
  (div elem))

(defelem entry-body [& elem]
  (div elem))

(defelem entry [& headnbody]
  (div headnbody))

(defn- toggle-elem-at [index states-cel]
  (let [new-state (not (get @states-cel index))]
    (dosync (doall (map-indexed #(swap! states-cel assoc %1 (if (= index %1)
                                                              new-state
                                                              false)) @states-cel)))
    ))

;Private DOM nodes created using functions

(defn- create-entry [index element states-cel]
  (let [childs  (goog.object/get element "childNodes")
        header  (.item childs 0)
        content (.item childs 1)]
    (div :class "panel panel-default"
        (div :class "panel-heading"
             :click #(toggle-elem-at index states-cel)
             header
             )
        (div :class (cell=  {:panel-collapse true
                             :collapse (not (get states-cel index))})
             (div :class "panel-body" content)))))

(defelem accordion [{:keys [id]} elems]
  (let [states (map-indexed #(if (= 0 %1) true false) elems)
        statesv (cell (vec states))]
    (div :class "panel-group" :id id
         (map-indexed #(create-entry %1 %2 statesv) elems))))
