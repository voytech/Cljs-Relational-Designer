(ns ui.components.popup
  (:require [tailrecursion.hoplon :refer [canvas by-id append-child add-children!  ]]
            [utils.dom.dom-utils :refer [remove-element]])
  (:require-macros
       [tailrecursion.javelin :refer [cell= dosync]]))

(defelem popup [{:keys [id left top max-width positioning ]} kids]
  (apply (div :id id :class "modal-content"
                     :style (str "position:" positioning ";"
                                 "display:none;"
                                 "left:" left "px;"
                                 "top:" top "px;"
                                 "max-width:" max-width "px;"
                                 "z-index:1000;")) kids))

(defprotocol IPopup
  (attach [this parent-id])
  (detach [this])
  (show [this])
  (show-at [this x y])
  (hide [this]))

(deftype Popup [id popup]
  IPopup
  (attach [this parent-id]
    (when (nil? (by-id id))
      (let [parent (by-id parent-id)]
        (append-child parent popup ))))

  (detach [this]
    (let [dom-popup (by-id id )]
      (when (not (nil? dom-popup))
        (remove-element dom-popup ))))

  (show [this]
      (.css (js/jQuery (str "#" id) "display" "block")))

  (show-at [this x y]
      (.css (js/jQuery (str "#" id)) "display" "block")
      (.css (js/jQuery (str "#" id)) "left" (str x "px"))
      (.css  (js/jQuery (str "#" id)) "top" (str y "px")))

  (hide [this]
      (.css (js/jQuery (str "#" id) "display" "none")))
)

(defn default-popup [id dom-content]
  (Popup. id (popup {:id id
                     :positioning "fixed"
                     :left 0 :top 0 :max-width 250}
                    dom-content)))
