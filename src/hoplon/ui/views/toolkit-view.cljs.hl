(ns ui.views.toolkit-view
  (:require
            [core.project.project-resources :as res]
            [impl.api.tenant.resource-api :as ra]
            [ui.components.photo :as photo ]
            [core.tools.tools-impl :refer [photo-tool
                                           text-tool
                                           slot-tool
                                           background-tool]]
            [ui.components.tool-box :as toolbox]))


;ADD MEMOIZE to this function.
(defn- prepare-tools [resource-type tool-func]
  (cell= (let [rsrcs (resource-type ra/resources)]
           (map tool-func rsrcs)
           )))

(defelem resource-library [{:keys [id type tool-func]}]
    (println (str "creating resource library for" type))
    (div :id id
     (photo/photo-loader :class "image-loader"
                         :callback #(do (println (str "filename " (:name %) " content-type " (:type %)))
                                        (ra/put-resource {:category (name type)
                                                          :filename (:name %)
                                                          :content-type (:type %)
                                                          :data (:content %)})
                                        ))
     (toolbox/tool-box :list (prepare-tools type tool-func))
     ))

(defelem photos-view []
  (resource-library :id "photos-lib"
                    :type :photo
                    :tool-func #(photo-tool (:filename %)
                                            (:content-type %)
                                            (str (:path %) "/" (:filename %))
                                            :photo)))

(defelem cliparts-view []
  (resource-library :id "cliparts-lib"
                    :type :clipart
                    :tool-func #(photo-tool (:filename %)
                                            (:content-type %)
                                            (str (:path %) "/" (:filename %))
                                             :clipart)))

(defelem backgrounds-view []
   (resource-library :id "backgrounds-lib"
                    :type :background
                    :tool-func #(background-tool (:filename %)
                                                 (:content-type %)
                                                 (str (:path %) "/" (:filename %)))))

(defelem templates-view-header []
  (div (text "Templates")))

(defelem templates-view []
  (div ))

(defelem tools-view []
  (toolbox/tool-box :list [
                           (text-tool)
                           (slot-tool)]))
