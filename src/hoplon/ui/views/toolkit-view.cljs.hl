(ns ui.views.toolkit-view
  (:require
            [core.project-resources :as res]
            [ui.components.photo :as photo ]
            [core.tools.tools-impl :refer [photo-tool
                                           text-tool
                                           slot-tool]]
            [ui.components.tool-box :as toolbox]
           ))

(def photo-lib (cell (list)))
(def cliparts-lib (cell (list)))
(def backgrounds-lib (cell (list)))

;ADD MEMOIZE to this function.
(defn- prepare-tools [resource-type tool-func]
  (cell= (let [rsrcs (resource-type res/resources)]
           (println (str "crafting tool for: " resource-type))
           (println (str "there are [" (count rsrcs) "] resources for: " resource-type))
           (map #(tool-func (:name %)
                            (:type %)
                            (:content %)) (vals rsrcs)))))

(defelem library-view []
  (div
   (photo/photo-loader :class "image-loader"
                       :callback #(swap! photo-lib conj (photo-tool (:name %)
                                                                    (:type %)
                                                                    (:content %))))
   ;;(photo/photo-list  :list photo-lib)
   ;;make a dynamically allocated tool-box which can handle new photos loeaded at runtime.
   ;;I do not know if is this ok to introduce such abstraction to treat photos as single tools.
   ;;maybe it is just all about applying misleading naming conventions here.
   (toolbox/tool-box :list photo-lib)
   ))

(defelem templates-view []
  (div ))

(defelem cliparts-view []
  (div (photo/photo-loader :class "image-loader"
                           :callback #(res/add-resource res/CLIPART %))
    (toolbox/tool-box :list (prepare-tools res/CLIPART photo-tool))))

(defelem backgrounds-view []
  (div))

(defelem tools-view []
  (toolbox/tool-box :list [
                           (text-tool)
                           (slot-tool)]))
