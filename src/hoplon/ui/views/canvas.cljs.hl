(ns ui.views.canvas
  (:require [utils.dom.dnd-utils :as dnd]
            [utils.dom.dom-utils :as dom]
            [utils.popups :as popups]
            [utils.canvas-events-tests :as cet]
            [core.settings :as settings]
            [core.actions-impl :refer [change-page!] ]
            [ui.components.pagination :refer [pagination]]
            [ui.components.popup :as p]
            [ui.views.editing :refer [editing]]
            [core.canvas-interface :as canvas-sheet]))

(def current-page (cell= (inc (get-in canvas-sheet/project [:page-index]))))

(defn resolve-drop "Should resolve drop events for following scenarios:
                    1. The drag source is from the library component (image is dragged)
                    2. The drag source comes from desktop (Use FileApi to load image)"
   [event]
   (.preventDefault event)
   (dnd/dispatch-drop-event event)
)

(dom/wait-on-element "canvas-wrapper"  (fn [] (canvas-sheet/initialize-workspace)
                                              (.addEventListener (dom/by-id "workspace-inner") "contextmenu"  #(.preventDefault %))
                                              ;; (popups/make-popup "editing"
                                              ;;                    "popups-holder"
                                              ;;                    (editing)
                                              ;;                    (fn [popup]
                                              ;;                      (canvas-sheet/add-event-handler "mouse:up"
                                              ;;                           (fn [event]
                                              ;;                             (popups/hide-all)
                                              ;;                             (let [src (.-e event)
                                              ;;                                   trg (.-target event)
                                              ;;                                   crd (cet/client-coords src)]
                                              ;;                               (when (and (= (.-which src) 3)
                                              ;;                                          (not (nil? trg)))
                                              ;;                                 (p/show-at popup (:x crd) (:y crd))))
                                              ;;                                      ))))
                                              ))

(defelem workspace []
  (div :id "workspace-inner"
       (div :id "page-indicator"
            :class "text-center"
              (text "Page : ~{current-page}"))
       (div :id "canvas-wrapper"
            :class "workspace-div"
            :drop resolve-drop
            :dragover #(.preventDefault %))
       (div :id "pagination"
            :class "page-pagination text-center"
            (pagination :enabled (cell= (get-in settings/settings [:multi-page]))
                        :pages (cell= (get-in settings/settings [:pages :count]))
                        :change-page #(change-page! % )))
       (div :id "slideshow" )
       (div :id "popups-holder"
            :style "position:relative;"))
)
