(ns ui.views.tenant.templates
  (:require [core.tenant.project-template :refer [update-property
                                                  get-property
                                                  get-template
                                                  templates
                                                  init-templates
                                                  add-empty-template
                                                  project-templates]]
            [clojure.set :refer [union]]
            [ui.components.combo-box :refer [combo-box]]))

(defn- neg-prop [name prop]
  (not (prop (get-template name))))

(defelem templates-header []
  (div (text "Templates")
   (button :class "btn btn-default pull-right btn-xs "
           :type "button"
           :click #(do (.stopPropagation %)
                       (add-empty-template))
           (span :class "glyphicon glyphicon-plus"))))

(defelem counter [{:keys [name property title]}]
  (div :class "col-md-12"
       (span (str " " title " "))
       (div :class "col-md-4 row pull-right"
            (button :class "btn btn-default btn-xs"
                    :type "button"
                    :click #(update-property name property (dec (get-property name property )))
                    (span :class "glyphicon glyphicon-minus"))
            (input :class "input-xs"
                   :type  "text"
                   :value (get-property name property ))
            (button :class "btn btn-primary btn-xs"
                    :type "button"
                    :click #(update-property name property (inc (get-property name property)))
                    (span :class "glyphicon glyphicon-plus")))))

(defelem tag [{:keys [name]}]
  (span :class "label label-default margin-02m" name
        (span :class "glyphicon glyphicon-remove")))

(defelem template-view [{:keys [name]}]
  (let [collapsed (cell true)]
    (div
     (div :class "panel panel-default"
          (div :class "panel-heading"
               (div :class "input-group input-group-sm"
                    (input
                     :class "form-control"
                     :type "text"
                     :on-change #(update-property name :name @% )
                     :value (get-property name :name))
                    (span :class "input-group-btn"
                          (button :class "btn btn-default"
                                  :type "button"
                                  :click #(reset! collapsed (not @collapsed))
                                  (span :class "glyphicon glyphicon-collapse-down")))))
          (div :class (cell=  {:panel-body true
                               :panel-collapse true
                               :collapse collapsed})
               (div :class "row"
                   (counter :title "Page count" :property :page-count :name name))
               (div :class "hdiv")
               (div :class "row"
                   (counter :title "Max Pages" :property :max-page-count :name name))
               (div :class "hdiv")
               (div :class "row"
                    (div :class "col-md-12"
                         (span :style "white-space: nowrap;" "Fixed page count")
                         (div :class "pull-right"
                              (input
                               :type "checkbox"
                               :value (get-property name :fixed-page-count)
                               :click #(do (update-property name :fixed-page-count (neg-prop name :fixed-page-count)) true)))))
               (div :class "row"
                    (div :class "col-md-12"
                         (span :style "white-space: nowrap;" "Custom format")
                         (div :class "pull-right"
                              (input
                               :type "checkbox"
                               :value (get-property name :custom-format?)
                               :click #(do (update-property name :custom-format? (neg-prop name :custom-format?)) true)))))
               (div :class "row"
                    (div :class "col-md-12"
                         (span :style "white-space: nowrap;" "Client notes")
                         (div :class "pull-right"
                              (input
                               :type "checkbox"
                               :value (get-property name :client-requests?)
                               :click #(do (update-property name :client-requests? (neg-prop name :client-requests?)) true)))))


               (div :class "hdiv")
               (div :class "row"
                    (div :class "col-md-12"
                         (span :style "white-space: nowrap;" "Page formats")
                         (let [selection (cell "A4")]
                           (div :class "pull-right "
                                 (combo-box :data ["A4" "A6" "A3" "A2" "A1"] :on-change #(reset! selection %))
                                 (button :class "btn btn-primary btn-xs"
                                         :type "button"
                                         :click #(->> (union #{@selection} (get-property name :page-formats))
                                                      (update-property name :page-formats))
                                         (span :class "glyphicon glyphicon-plus"))
                                ))))
               (div (doall (map #(tag :name %) (get-property name :page-formats))))
                   )))))

(defelem templates-view []
  (div :id "templates"
   (cell=  (let [keys (keys project-templates)]
             (doseq [key keys]
               (println (str "Template details: " (.stringify js/JSON (clj->js (get project-templates key))))))
             (doall (map #(template-view :name %) keys))))))
