(ns ui.views.tenant.templates
  (:require [impl.api.tenant.templates :refer [update-property
                                               get-property
                                               current-template
                                               save-template!
                                               create-template!
                                               get-template!
                                               get-templates!
                                               change-page
                                               templates]]
            [clojure.set :refer [union]]
            [ui.components.combo-box :refer [combo-box]]
            [ui.components.paged-list :refer [paged-list]]
            [ui.components.hoplon-grid :refer [hoplon-grid]]))

(defn- neg-prop [prop]
  (not (current-template-value prop)))

(defelem templates-header []
  (div (text "Templates")
   (button :class "btn btn-default pull-right btn-xs "
           :type "button"
           :click #(do (.stopPropagation %)
                       (create-template! "template"))
           (span :class "glyphicon glyphicon-plus"))))

(defelem counter [{:keys [property title]}]
  (div :class "col-md-12"
       (span (str " " title " "))
       (div :class "col-md-4 row pull-right"
            (button :class "btn btn-default btn-xs"
                    :type "button"
                    :click #(update-property property (dec (current-template-value property)))
                    (span :class "glyphicon glyphicon-minus"))
            (input :class "input-xs"
                   :type  "text"
                   :value (get-property property))
            (button :class "btn btn-primary btn-xs"
                    :type "button"
                    :click #(update-property property (inc (current-template-value property)))
                    (span :class "glyphicon glyphicon-plus")))))

(defelem tag [{:keys [name on-click active?]}]
  (span :click #(on-click name) :class (cell=  {:tag true
                                                :label true
                                                :label-default (not (active?))
                                                :label-primary (active?)
                                                :margin-02m true
                                                }) name
        (span :class "glyphicon glyphicon-remove")))

(defn current-template-value [property]
  (property @current-template))

(defelem tag-bag [{:keys [title s-property t-property source-data]}]
  (div (div :class "row"
            (div :class "col-md-12"
                 (span :style "white-space: nowrap;" title)
                 (let [selection (cell (first source-data))]
                   (div :class "pull-right "
                        (combo-box :data source-data :on-change #(reset! selection %))
                        (button :class "btn btn-primary btn-xs"
                                :type "button"
                                :click #(->> (union #{@selection} (current-template-value s-property))
                                             (update-property s-property))
                                (span :class "glyphicon glyphicon-plus"))
                        ))))
       (div
        (cell= (let [items (seq (s-property current-template))]
                 (doall (map #(tag :name %
                                   :on-click (fn [name]
                                               (update-property t-property name))
                                   :active? (fn [] (= % (t-property current-template)))) items)))))))

(defelem template-view [{:keys [name]}]
  (div :class "panel panel-default" :style "margin-top:2px"
       (div :class "panel-heading"
            (div :class "input-group input-group-sm"
                 (div :style "vertical-align:middle"
                      (text (get-property name :name)))
                 (span :class "input-group-btn"
                       (button :class "btn btn-default"
                               :type "button"
                               :click #(get-template! name)
                               (span :class "glyphicon glyphicon-open")))))))

(defelem template-edit []
  (div :class (cell= {:hidden (empty? current-template)})
   (div :class "panel panel-default"
        (div :class "panel-heading"
             (div :class "input-group input-group-sm"
                  (input
                   :class "form-control"
                   :type "text"
                   :on-change #(update-property :name @%)
                   :value (get-property :name))
                  (span :class "input-group-btn"
                        (button :class "btn btn-default"
                                :type "button"
                                :click #(save-template! @current-template)
                                (span :class "glyphicon glyphicon-save")))))
        (div :class  (cell= {:panel-body true
                             :panel-collapse true
                             :collapse false})
             (div :class "row"
                  (counter :title "Page count"
                           :property :page-count ))
             (div :class "hdiv")
             (div :class "row"
                  (counter :title "Max Pages"
                           :property :max-page-count ))
             (div :class "hdiv")
             (div :class "row"
                  (div :class "col-md-12"
                       (span :style "white-space: nowrap;" "Fixed page count")
                       (div :class "pull-right"
                            (input
                             :type "checkbox"
                             :value (get-property :fixed-page-count)
                             :click #(do (update-property :fixed-page-count (neg-prop :fixed-page-count)) true)))))
             (div :class "row"
                  (div :class "col-md-12"
                       (span :style "white-space: nowrap;" "Custom format")
                       (div :class "pull-right"
                            (input
                             :type "checkbox"
                             :value (get-property :custom-format?)
                             :click #(do (update-property :custom-format? (neg-prop :custom-format?)) true)))))

             (div :class "hdiv")
             (tag-bag :title "Available page formats"
                      :t-property :current-format
                      :s-property :page-formats :source-data ["A1" "A2" "A3" "A4" "A5" "A6"])
             (div :class "hdiv")
             (tag-bag :title "Available print surfaces"
                      :t-property :current-surface
                      :s-property :printing-surfaces :source-data ["Paper" "Wood" "Metal"])
             )
        )))

(defelem load-tmpl-plug [{:keys [row]}]
  (span :class "input-group-btn"
        (button :class "btn btn-default"
                :type "button"
                :click #(get-template! (:name row))
                (span :class "glyphicon glyphicon-open"))))

(defelem templates-view []
  (div :id "templates"
       (div :id "template-edit"
            (template-edit))
       (div :id "templates-grid" :style "margin-top:2px"
            (hoplon-grid :schema {:name {:title "Template Name"}
                                  :info {:title "Description"}
                                  :load {:title "Select"
                                         :cell-plugin load-tmpl-plug}}
                         :data-cell templates
                         :paging-opts {:page-size 2,:page-nr 1}
                         :change-page-func change-page))))
