(page "index.html"
  (:require
    [core.router.router :as router]
    [impl.api.public.auth :as a]
    [ui.pages.main :refer [main]]
    [ui.pages.admin :refer [admin]]
    [ui.pages.register :refer [register]]
    [ui.pages.register2step :refer [register2step]]
    ;[impl.states.auth-states :as as]
    [ui.pages.login :refer [login]]
    [ui.components.nav-bar :refer [nav-bar]]
    [ui.components.login-widget :refer [login-widget]]
    [utils.canvas-popups :as popups]
    [utils.dom.dom-utils :as dom]
    [hoplon.twitter.bootstrap :as b :refer [container tab tabs]]))

(def left-side-links (cell []))
(def right-side-links (cell []))

(defn- authenticated-navbar []
  (dosync
   (reset! right-side-links [{:id "auth" :widget (login-widget {:user a/login-state})}
                             {:id "logout" :title "Logout" :action #(router/goto-page "#/logout")}])
   (reset! left-side-links [])))

(defn- unauthenticated-navbar []
  (dosync
   (reset! right-side-links [{:id "login" :title "Login" :action #(router/goto-page "#/login")}
                             {:id "register" :title "Register" :action #(router/goto-page "#/register")}])
   (reset! left-side-links [])))

(defn- tenant-navbar []
  (dosync
   (reset! right-side-links [{:id "auth" :widget (login-widget (:identity a/login-state))}
                             {:id "logout" :title "Logout" :action #(router/goto-page "#/logout")}])
   (reset! left-side-links [{:id "customize" :title "Customize" :action #(router/goto-page "#/login")}
                            {:id "customers" :title "Customers" :action #(router/goto-page "#/login")}
                            {:id "orders" :title "Orders" :action #(router/goto-page "#/login")}
                            {:id "messages" :title "Messages" :action #(router/goto-page "#/login")}])))

(defn initialize []
  (println "Initializing application...")
  (println "Checking authentication....")
  (a/is-login)
  (router/set-container-id "main-container")
  (router/def-route "#/main"     (main))
  (router/def-route "#/admin"    (admin))
  (router/def-route "#/register" (register :form-title "Enter all mandatory information in order to create account."))
  (router/def-route "#/register2step" (register2step :form-title "Finalize account setup!"))
  (router/def-route "#/login"    (login :form-title "Please provide username and password"))
  (router/route)
  (println "Hash-tag routes initialized...")

  (cell= (cond
           (and (not (nil? (:identity a/login-state)))
                (= (-> a/login-state :role) :core.auth.roles/TENANT)
                (not (:initialized? a/login-state)))
           (do (router/goto-page "#/register2step")
               (authenticated-navbar))

           (and (not (nil? (:identity a/login-state)))
                (= (-> a/login-state :role) :core.auth.roles/TENANT)
                (:initialized? a/login-state))
           (do (println (.getItem js/localStorage ":login-state"))
               (router/goto-page "#/admin")
               (tenant-navbar))

           (and (not (nil? (:identity a/login-state)))
                (= (-> a/login-state :role) :core.auth.roles/USER))
           (do (println (.getItem js/localStorage ":login-state"))
               (router/goto-page "#/main")
               (authenticated-navbar))

           (nil? (:identity a/login-state))
           (do (println (.getItem js/localStorage ":login-state"))
               (router/goto-page "#/register")
               (unauthenticated-navbar))))
  (println "Authentication state transitions initialized..."))

(println (str "local storage:" (.getItem js/localStorage ":login-state")))
(html
  (head
   (link :href "css/bootstrap.inc.css" :rel "stylesheet" )
   (link :href "css/main.inc.css" :rel "stylesheet" )
   (script :src "js/bootstrap-filestyle.inc.js")
   (script :src "js/init.inc.js")
   (script :src "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"))

  (body
   (nav-bar {:id "navbar-container"
             :brand-txt "Photo Collage"
             :left-side-links left-side-links
             :right-side-links right-side-links})
   (div :id "main-container")))

(dom/wait-on-element "main-container" (fn [] (initialize)))
